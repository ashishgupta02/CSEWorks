// Stream.InStream.d
module Stream.InStream;

import std.algorithm;
import std.stdio;

//-----------------------------------------------------------------------------------------------
// Done
//-----------------------------------------------------------------------------------------------
public class InStream {
  private const(byte[]) _data;
  private int _offset = 0;
  private int _length = 0;

  //-----------------------------------------------------------------------------------------------
  // Done
  //-----------------------------------------------------------------------------------------------
  public this (byte[] buffer) {
    this._data = buffer;
    this._length = cast(int)buffer.length;
  }

  //-----------------------------------------------------------------------------------------------
  // Done
  //-----------------------------------------------------------------------------------------------
  public int read() {
    if (this._offset >= this._length) {
      return -1;
    }
    return cast(int)(this._data[this._offset++] & 0xff);
  }

  //-----------------------------------------------------------------------------------------------
  // Done
  //-----------------------------------------------------------------------------------------------
  public int read(byte[] buffer, int offset, int size) {
    if (this._offset >= this._length) {
      return -1;
    }

    int len = min(size, this._length - this._offset);
    for (int i = 0; i < len; ++i) {
      buffer[offset++] = this._data[this._offset++];
    }

    return len;
  }

  //-----------------------------------------------------------------------------------------------
  // Done
  //-----------------------------------------------------------------------------------------------
  public int length() {
    return this._length;
  }
}
